name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

permissions:
  contents: write
  packages: write
  actions: read
  checks: write
  pull-requests: write

env:
  NODE_VERSION: '18.x'
  JAVA_VERSION: '17'

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint --if-present

      - name: Run tests
        run: npm test --if-present

      - name: Build project
        run: npm run build

      - name: Upload test coverage
        if: matrix.node-version == '18.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  build-vscode:
    name: Build VSCode Extension
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build server
        run: npm run build --workspace=server

      - name: Build VSCode extension
        run: |
          npm run build --workspace=vscode-extension
          npm run package --workspace=vscode-extension

      - name: Upload VSCode extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension-${{ github.sha }}
          path: vscode-extension/*.vsix
          retention-days: 30

      - name: Upload extension for marketplace
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension-release
          path: vscode-extension/*.vsix

  build-jetbrains:
    name: Build JetBrains Plugin
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Make gradlew executable
        run: chmod +x jetbrains-plugin/gradlew

      - name: Build JetBrains plugin
        run: |
          cd jetbrains-plugin
          ./gradlew buildPlugin --no-daemon

      - name: Verify plugin
        run: |
          cd jetbrains-plugin
          ./gradlew verifyPlugin --no-daemon

      - name: Upload JetBrains plugin artifact
        uses: actions/upload-artifact@v4
        with:
          name: jetbrains-plugin-${{ github.sha }}
          path: jetbrains-plugin/build/distributions/*.zip
          retention-days: 30

      - name: Upload plugin for marketplace
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: jetbrains-plugin-release
          path: jetbrains-plugin/build/distributions/*.zip

  publish-vscode:
    name: Publish VSCode Extension
    runs-on: ubuntu-latest
    needs: [test, build-vscode]
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build server
        run: npm run build --workspace=server

      - name: Download VSCode extension artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode-extension-release
          path: vscode-extension/

      - name: Install vsce and ovsx
        run: |
          npm install -g @vscode/vsce ovsx

      - name: Publish to VS Marketplace
        if: env.VSCE_PAT != ''
        run: |
          cd vscode-extension
          vsce publish --packagePath *.vsix
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Publish to Open VSX Registry
        if: env.OVSX_PAT != ''
        run: |
          cd vscode-extension
          ovsx publish *.vsix
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

      - name: Create GitHub Release Asset
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: vscode-extension/*.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-jetbrains:
    name: Publish JetBrains Plugin
    runs-on: ubuntu-latest
    needs: [test, build-jetbrains]
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Make gradlew executable
        run: chmod +x jetbrains-plugin/gradlew

      - name: Publish JetBrains plugin
        if: env.JETBRAINS_PUBLISH_TOKEN != ''
        run: |
          cd jetbrains-plugin
          ./gradlew publishPlugin --no-daemon
        env:
          PUBLISH_TOKEN: ${{ secrets.JETBRAINS_PUBLISH_TOKEN }}

      - name: Download JetBrains plugin artifact
        uses: actions/download-artifact@v4
        with:
          name: jetbrains-plugin-release
          path: ./artifacts/

      - name: Create GitHub Release Asset
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: ./artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: [build-vscode]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download VSCode extension
        uses: actions/download-artifact@v4
        with:
          name: vscode-extension-release
          path: ./artifacts/

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            sed -n '/^## \[/,/^## \[/p' CHANGELOG.md | head -n -1 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
